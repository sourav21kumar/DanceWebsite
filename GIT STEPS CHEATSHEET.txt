------------THESE ARE THE COMMAND LINES TAHT WE HAVE USE TO CREATE THE GIT REPOSITRY------------

------WHERE I AHVE USED <> ANGULAR BRACKETS INDICATING THAT REPLACE IT WITH THE DESIRD URL WHICH I HAVE MENTIONED INSIDE THE BRACKETS------------


--git config --global user.name Sourav
--git config --global user.email sourav21kumar@gmail.com

1)TO CREATE A .gitignore file
   ------touch .gitignore
2) TO INITIALIZE GIT REPOSITRY
   -------git init
3) EVERY FILE EXCLUDING THE node_modules COMES TO THE STAGGING AREA
       -------git add .

 when we did this excluding the node_modules file everything comes to the stagging area node_modules is excluded because we have added to the .gitignore file

4)git commit -m"Initial commit"

5)TO KNOW WHEATHER YOUR WORKING TREE IS CLEAN OR NOT RUN THIS COMMAN---THIS COMMAND IS NOT A PART OF THE PROCESS OF CREATING AND PUSHING FILES TO THE GIT REPOSITRY

 -----------git status

6) git remote add origin git@github.com:sourav21kumar/DanceWebsite.git

7)CERETING OUR SSH KEY  
------------ssh-keygen -t ed25519 -C "Sourav@sourav21kumar@gmail.com"

ORIGINAL COMMAND ------ssh-keygen -t ed25519 -C "YOUR_EMAIL@example.com"

8)cat <then here paste the path that we got in the command window> # then a ssh key will appear and then add that key to your github account

9) git remote add origin <ssh url.git>

10) --- git push origin master(now the project ios added to the github)



-------THESE ARE THE STEPS THAT ARE YOU HAVE TO USE TO UPLOAD TO THE GITHUB------------
 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1) git add --a = (to add all the files to staging area)
2) git commit -m "Initial Commit" 
3) git log = (to know about all the commits)
4) rm -rf .git = (it will delete the git repositry)
5)pwd = (present working directory)
6) ls = (lists the contents of the present directory)
7) cd = (change directory command)
8) git clone <paste the url of the repositry which we want to clone> <file name that you want to name> = (for cloning git repositry)

9) if we want to ignore a particular file format then we have to do inside .gitignore  wehave to write 
          => *.extension of the file

10)  by default git will not track empty folders

11) if we want to ignore a folder everywhere then we have to write
             =>directory name/

12) jadi khali bahara se particular directory ku ignore karibara achi then ame lekhiba 
                 =>/directory name/

13) git diff --- compare the staging area and working directory

14) git diff --staged
            => compare the previously commited version with the current satged version

-----------HOW TO SKIP STAGING AREA------------
1) git commit -a -m "here the message you want to write"
            =>this will directly commit the fils but if we have any untracked file then it will commit those untracked files.

--------------------------MOVING AND RENAME FILES IN GIT-----------------------------------------------

1ST METHOD(manual method) ----rename the file and then use git add command then it will show you have renamed the particular file then you can commit the file

2ND METHOD(command method)----- git mv old_filename new_filename =========> this method will rename and will add the file to the staging area

---------------------------------------------------REMOVING FILE---------------------------------------------------------------
command = git rm <file or directory name which you want to remove>--this command will remove the file and also add the the file to the staging area

but without using this command if we will manually delete the file then FIRST we have to delete the file and then we have to USE the git add COMMAND then it will delete the file and will stage and commit the file in the staging area----so it is better to use the command 


----------------------------FOR NOT TARCKING A FILE------------------------------------------------
1) git rm --cached <file name that we do not want to track>    ====>this will not delete the file permanently it will only not track the file 

this thing we are using because for example if we have added a file  to the .gitignore file which is previously been tracked by git  then after adding the file to the .gitignore if we change something in that file and if we will run git status then also it will show that that file is modified  ---so here we have added the file to .gitignore but still it is tracking the file  so in order to not track the file so we have to explicitly tell to git that we now do not want to track the file so for that we have to run the command ---git rm --cached <file name that we do not want to track>


-------------------git log--------------------------------------------
1) git log -p (then this will show the git log with the diff that means with who commited and will show what changes are made)

2) git log --stat (it will show the commits in a short way)

3) git log --pretty=short ======>will show the commit in a short way 
4) git log --pretty=oneline =====>(it wil show the commits in one line)
 5) git log --since=n.days "or" week "or" month "or"year
          where n = number ====>basically this command is to see all the commits in that particular time 

6) git log --pretty=format: ""%h --%an
          ==========>here it will show commit hash -- and author name   (TI EXPLORE MORE ABOUT THIS WE WILL EXPLORE MORE IN THE git scm website (not so important))




--------------------------------------------------------------UNSTAGING AND UNMODIFYING FILES IN GIT---------------------------------------------------------------

1) git restore --staged <file name that you have staged previously but now you do not want to stage>
            for example====>git restore --staged file.txt    ======>this will remove the file from the staged area which was previously staged


----------------------------------UNMODIFY THE FILES-----------------------------------------------------------------

1) git checkout --<file name that you want to restore> ====> this will restore the file to its original content after the commit you have done


---------------------WORKIN WITH REMOTE REPOSITRIES-----------------------------------------------------------------------
1) git remote 
2) git remote  -v
3)  git remote add origin <url> ==> here origin can be replaced with any name


1) git config --global alias.st status====> alias were created to for faster workflow now we can see git status by typing git st====> simillarly some more alias can be done

similarly for unstage file we have created an alias 
   previously to unsatge a file =====>git restore --staged <file name>
                       alias ======> git config --global alias.unstage 'restore --staged'
                         now the command for s=unstage ======> git unstage


----------------------------------------------CREATING AND SWITCHING BRANCHES------------------------------------------------------------------------
1) git checkout -b develop ====> (-b means make a new branch of master name develop)

2) git checkout master  ======> this will change the branch (here in the previous code we have created a branch develop and by writing this command we have moved from develop branch to master branch)

3) git branch (is to know what are the branches you have and in which branch you are presently at) 


-------------------MERGING BRANCHES IN GIT---------------------------------------
1) git merge <BRANCH NAME THAT YOU WANT TO MERGE> if using visual studio then it will show the options to resolve merge conflicts by just a click

git branch -v ===> this will show the last commit in the branches with their commit hash
git branch --merged ======> shows all the already merged branches
git branch --no-merged===========> not merged branches

-----------------------------------------------DELETING BRANCHES----------------------------
1) git branch -d <BRANCH NAME THAT YOU WANT TO DELETE> ==========> delete the merged branches ---------(if that branch is not merged then it will show an error warning that the branch is not merged) instead if we will use git branch -D <BRANCH NAME THAT YOU WANT TO DELETE>--------(IF NOT MERGED IT WILL DELETE THE BRANCH WITHOUT GIVING ANY ERROR WARNING)
